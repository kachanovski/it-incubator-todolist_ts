{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","newTaskTitleValue","setNewTaskTitleValue","error","setError","addTask","trim","addItem","TextField","onKeyPress","e","charCode","variant","helperText","value","onChange","currentTarget","label","IconButton","color","onClick","fontSize","EditableSpan","editMode","setEditMode","title","setTitle","autoFocus","onBlur","changeTitle","onDoubleClick","TodoList","newTitle","changeTitleTodoList","id","deleteTodoList","tasks","map","t","key","className","isDone","Checkbox","newStatusTask","checked","changeStatus","deleteTask","Button","filter","changeFilter","App","todoListId1","v1","todoListId2","todoLists","setTodoLists","setTasks","todoListID","todoListTasks","tl","newTask","todoList","find","task","AppBar","position","Toolbar","edge","aria-label","Typography","Container","fixed","Grid","container","style","padding","spacing","allTodoListTasks","changeStatusValue","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f893289e.chunk.js","sourcesContent":["import React, {KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\n\r\ntype AddItemFormType = {\r\n    addItem: (newTaskTitleValue: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n\r\n    let [newTaskTitleValue, setNewTaskTitleValue] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitleValue.trim() !== \"\") {\r\n            props.addItem(newTaskTitleValue.trim());\r\n            setNewTaskTitleValue(\"\")\r\n        } else {\r\n            setError(\"ERROR\")\r\n        }\r\n    }\r\n\r\n    const onPressKey = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField onKeyPress={onPressKey}\r\n                       variant=\"outlined\"\r\n                       helperText={error}\r\n                       error={!!error}\r\n                       value={newTaskTitleValue}\r\n                       onChange={(e) => {\r\n                           setNewTaskTitleValue(e.currentTarget.value)\r\n                       }}\r\n                       label=\"Введите значение\"/>\r\n            <IconButton color={\"primary\"} onClick={addTask}>\r\n                <AddBoxIcon fontSize={\"large\"} />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanType) {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField label=\"Standard\"\r\n                         value={title}\r\n                         autoFocus\r\n                         onChange={changeTitle}\r\n                         onBlur={activateViewMode}/>\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n\r\n}","import React, {ChangeEvent} from 'react';\r\nimport './App.css';\r\nimport {FilterValueType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {Button, Checkbox} from '@material-ui/core';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: string\r\n    tasks: Array<TaskType>\r\n    addTask: (newTaskTitleValue: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValueType, todoListID: string) => void\r\n    deleteTask: (id: string, todoListID: string) => void\r\n    changeStatus: (id: string, isDone: boolean, todoListID: string) => void\r\n    changeTitle: (id: string, newTitle: string, todoListID: string) => void\r\n    changeTitleTodoList: (newTitle: string, todoListID: string) => void\r\n    deleteTodoList: (id: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const deleteTodoList = () => {\r\n        props.deleteTodoList(props.id)\r\n    }\r\n    const onClickFilterAll = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }\r\n    const onClickFilterActive = () => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }\r\n    const onClickFilterCompleted = () => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const changeTitleTodoList = (newTitle: string) => {\r\n        props.changeTitleTodoList(newTitle, props.id)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} changeTitle={changeTitleTodoList}/>\r\n                <IconButton onClick={deleteTodoList}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {props.tasks.map(t => {\r\n                    let changeStatusTask = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newStatusTask = e.currentTarget.checked\r\n                        props.changeStatus(t.id, newStatusTask, props.id)\r\n                    }\r\n                    let changeTitleTask = (newTitle: string) => {\r\n                        props.changeTitle(t.id, newTitle, props.id)\r\n                    }\r\n                    let deleteTask = () => {\r\n                        props.deleteTask(t.id, props.id)\r\n                    }\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox color={\"primary\"} onChange={changeStatusTask} checked={t.isDone}/>\r\n                        <EditableSpan changeTitle={changeTitleTask} title={t.title}/>\r\n                        <IconButton onClick={deleteTask}>\r\n                            <DeleteIcon fontSize=\"small\"/>\r\n                        </IconButton>\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                        color={\"default\"}\r\n                        onClick={onClickFilterAll}>All\r\n                </Button>\r\n                <Button variant={props.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                        color={\"primary\"}\r\n                        onClick={onClickFilterActive}>Active\r\n                </Button>\r\n                <Button variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                        color={\"secondary\"}\r\n                        onClick={onClickFilterCompleted}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, IconButton, Typography, Button, Paper} from \"@material-ui/core\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nexport type FilterValueType = \"all\" | \"completed\" | \"active\"\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todoListId1 = v1();\r\n    let todoListId2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {\r\n            id: todoListId1,\r\n            title: \"what to learn\",\r\n            filter: \"all\"\r\n        },\r\n        {\r\n            id: todoListId2,\r\n            title: \"what to learn\",\r\n            filter: \"all\"\r\n        }\r\n    ])\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId1]: [\r\n            {id: v1(), title: \"1111\", isDone: true},\r\n            {id: v1(), title: \"22222\", isDone: false},\r\n        ],\r\n        [todoListId2]: [\r\n            {id: v1(), title: \"food\", isDone: true},\r\n            {id: v1(), title: \"qwe\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    function deleteTask(id: string, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = todoListTasks.filter(t => t.id !== id)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function deleteTodoList(id: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== id))\r\n        delete tasks[id]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(newTaskTitleValue: string, todoListID: string) {\r\n        let newTask = {id: v1(), title: newTaskTitleValue, isDone: false}\r\n        let todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = [newTask, ...todoListTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeFilter(value: FilterValueType, todoListID: string) {\r\n        let todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.filter = value\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID]\r\n        let task = todoListTasks.find(t => t.id === id)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTitle(id: string, newTitle: string, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID]\r\n        let task = todoListTasks.find(t => t.id === id)\r\n        if (task) {\r\n            task.title = newTitle\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let todoList: TodoListType = {\r\n            id: v1(),\r\n            title: title,\r\n            filter: \"all\"\r\n        };\r\n        setTodoLists([todoList, ...todoLists])\r\n        setTasks({...tasks, [todoList.id]: []}\r\n        )\r\n    }\r\n\r\n    function changeTitleTodoList(newTitle: string, id: string) {\r\n        let todoList = todoLists.find(tl => tl.id === id)\r\n        if (todoList) {\r\n            todoList.title = newTitle\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map(tl => {\r\n                        let allTodoListTasks = tasks[tl.id];\r\n                        let changeStatusValue = allTodoListTasks;\r\n\r\n                        if (tl.filter === \"active\") {\r\n                            changeStatusValue = allTodoListTasks.filter(t => t.isDone === false)\r\n                        }\r\n                        if (tl.filter === \"completed\") {\r\n                            changeStatusValue = allTodoListTasks.filter(t => t.isDone === true)\r\n                        }\r\n\r\n                        return <Grid item>\r\n                            <Paper style={{padding: \"10px\"}}>\r\n                                <TodoList key={tl.id}\r\n                                          id={tl.id}\r\n                                          tasks={changeStatusValue}\r\n                                          deleteTask={deleteTask}\r\n                                          deleteTodoList={deleteTodoList}\r\n                                          filter={tl.filter}\r\n                                          changeTitleTodoList={changeTitleTodoList}\r\n                                          changeTitle={changeTitle}\r\n                                          changeStatus={changeStatus}\r\n                                          changeFilter={changeFilter} addTask={addTask}\r\n                                          title={tl.title}/>\r\n                            </Paper>\r\n                        </Grid>\r\n\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}