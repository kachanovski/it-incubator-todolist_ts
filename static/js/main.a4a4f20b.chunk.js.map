{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","newTaskTitleValue","setNewTaskTitleValue","error","setError","addTask","trim","addItem","onKeyPress","e","charCode","value","onChange","currentTarget","onClick","className","EditableSpan","editMode","setEditMode","title","setTitle","autoFocus","onBlur","changeTitle","onDoubleClick","TodoList","newTitle","changeTitleTodoList","id","deleteTodoList","tasks","map","t","key","isDone","type","newStatusTask","checked","changeStatus","deleteTask","filter","changeFilter","App","todoListId1","v1","todoListId2","todoLists","setTodoLists","setTasks","todoListID","todoListTasks","tl","newTask","todoList","find","task","allTodoListTasks","changeStatusValue","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a4a4f20b.chunk.js","sourcesContent":["import React, {KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (newTaskTitleValue: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n\r\n    let [newTaskTitleValue, setNewTaskTitleValue] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitleValue.trim() !== \"\") {\r\n            props.addItem(newTaskTitleValue.trim());\r\n            setNewTaskTitleValue(\"\")\r\n        } else {\r\n            setError(\"ERROR\")\r\n        }\r\n    }\r\n\r\n    const onPressKey = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input onKeyPress={onPressKey} value={newTaskTitleValue} onChange={(e) => {\r\n                setNewTaskTitleValue(e.currentTarget.value)\r\n            }}/>\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanType) {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input value={title}\r\n                     autoFocus\r\n                     onChange={changeTitle}\r\n                     onBlur={activateViewMode}/>\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n\r\n}","import React, {ChangeEvent} from 'react';\r\nimport './App.css';\r\nimport {FilterValueType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: string\r\n    tasks: Array<TaskType>\r\n    addTask: (newTaskTitleValue: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValueType, todoListID: string) => void\r\n    deleteTask: (id: string, todoListID: string) => void\r\n    changeStatus: (id: string, isDone: boolean, todoListID: string) => void\r\n    changeTitle: (id: string, newTitle: string, todoListID: string) => void\r\n    changeTitleTodoList: (newTitle: string, todoListID: string) => void\r\n    deleteTodoList: (id: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const deleteTodoList = () => {\r\n        props.deleteTodoList(props.id)\r\n    }\r\n    const onClickFilterAll = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }\r\n    const onClickFilterActive = () => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }\r\n    const onClickFilterCompleted = () => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const changeTitleTodoList = (newTitle: string) => {\r\n        props.changeTitleTodoList(newTitle, props.id)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} changeTitle={changeTitleTodoList}/>\r\n                <button onClick={deleteTodoList}>X</button>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {props.tasks.map(t => {\r\n                    let changeStatusTask = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newStatusTask = e.currentTarget.checked\r\n                        props.changeStatus(t.id, newStatusTask, props.id)\r\n                    }\r\n                    let changeTitleTask = (newTitle: string) => {\r\n                        props.changeTitle(t.id, newTitle, props.id)\r\n                    }\r\n                    let deleteTask = () => {\r\n                        props.deleteTask(t.id, props.id)\r\n                    }\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\" onChange={changeStatusTask} checked={t.isDone}/>\r\n                        <EditableSpan changeTitle={changeTitleTask} title={t.title}/>\r\n                        <input onClick={deleteTask} type=\"button\" value={\"X\"}/>\r\n\r\n                    </li>\r\n                })}\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === \"all\" ? \"active-filter\" : \"\"}\r\n                        onClick={onClickFilterAll}>All\r\n                </button>\r\n                <button className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                        onClick={onClickFilterActive}>Active\r\n                </button>\r\n                <button className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                        onClick={onClickFilterCompleted}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type FilterValueType = \"all\" | \"completed\" | \"active\"\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todoListId1 = v1();\r\n    let todoListId2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {\r\n            id: todoListId1,\r\n            title: \"what to learn\",\r\n            filter: \"all\"\r\n        },\r\n        {\r\n            id: todoListId2,\r\n            title: \"what to learn\",\r\n            filter: \"all\"\r\n        }\r\n    ])\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId1]: [\r\n            {id: v1(), title: \"1111\", isDone: true},\r\n            {id: v1(), title: \"22222\", isDone: false},\r\n        ],\r\n        [todoListId2]: [\r\n            {id: v1(), title: \"food\", isDone: true},\r\n            {id: v1(), title: \"qwe\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    function deleteTask(id: string, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = todoListTasks.filter(t => t.id !== id)\r\n        setTasks({...tasks})\r\n    }\r\n    function deleteTodoList(id: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== id))\r\n        delete tasks[id]\r\n        setTasks({...tasks})\r\n    }\r\n    function addTask(newTaskTitleValue: string, todoListID: string) {\r\n        let newTask = {id: v1(), title: newTaskTitleValue, isDone: false}\r\n        let todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = [newTask, ...todoListTasks]\r\n        setTasks({...tasks})\r\n    }\r\n    function changeFilter(value: FilterValueType, todoListID: string) {\r\n        let todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.filter = value\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n    function changeStatus(id: string, isDone: boolean, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID]\r\n        let task = todoListTasks.find(t => t.id === id)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n    function changeTitle(id: string, newTitle: string, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID]\r\n        let task = todoListTasks.find(t => t.id === id)\r\n        if (task) {\r\n            task.title = newTitle\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n    function addTodoList(title: string) {\r\n        let todoList: TodoListType = {\r\n            id: v1(),\r\n            title: title,\r\n            filter: \"all\"\r\n        };\r\n        setTodoLists([todoList, ...todoLists])\r\n        setTasks({...tasks, [todoList.id]: []}\r\n        )\r\n    }\r\n    function changeTitleTodoList(newTitle: string, id: string) {\r\n        let todoList = todoLists.find(tl => tl.id === id)\r\n        if (todoList) {\r\n            todoList.title = newTitle\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList}/>\r\n            {todoLists.map(tl => {\r\n\r\n                let allTodoListTasks = tasks[tl.id];\r\n                let changeStatusValue = allTodoListTasks;\r\n\r\n                if (tl.filter === \"active\") {\r\n                    changeStatusValue = allTodoListTasks.filter(t => t.isDone === false)\r\n                }\r\n                if (tl.filter === \"completed\") {\r\n                    changeStatusValue = allTodoListTasks.filter(t => t.isDone === true)\r\n                }\r\n\r\n                return <TodoList key={tl.id}\r\n                                 id={tl.id}\r\n                                 tasks={changeStatusValue}\r\n                                 deleteTask={deleteTask}\r\n                                 deleteTodoList={deleteTodoList}\r\n                                 filter={tl.filter}\r\n                                 changeTitleTodoList={changeTitleTodoList}\r\n                                 changeTitle={changeTitle}\r\n                                 changeStatus={changeStatus}\r\n                                 changeFilter={changeFilter} addTask={addTask}\r\n                                 title={tl.title}/>\r\n\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}